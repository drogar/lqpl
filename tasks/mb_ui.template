
$LOAD_PATH.unshift 'lib/ruby'
require 'swingset'

include Neurogami::SwingSet::Core

# Generated Ui frame
class %sUi < Frame
  include Neurogami::SwingSet::MiG

  mig_layout

  FRAME_WIDTH  = 600
  FRAME_HEIGHT = 130

  LABEL_WIDTH  = 400
  LABEL_HEIGHT = 60

  # Make sure our components are available!
  attr_accessor :default_button, :default_label

  def initialize(*args)
    super
    self.minimum_width  = FRAME_WIDTH
    self.minimum_height = FRAME_HEIGHT
    set_up_components
    self.default_close_operation = EXIT_ON_CLOSE
  end

  def set_up_components
    component_panel = make_component_panel

    @default_label = make_default_label

    @default_button = make_default_button

    # Add components to panel
    component_panel.add @default_label, 'gap unrelated'
    component_panel.add @default_button, 'gap unrelated'

    add component_panel
  end

  def make_component_panel
    component_panel = Panel.new

    # If we were clever we would define a method that took a  single hex value, like CSS.
    component_panel.background_color 255, 255, 255
    component_panel.size FRAME_WIDTH, FRAME_HEIGHT

    # This code uses the MiG layout manager.
    # To learn more about MiGLayout, see:
    #     http://www.miglayout.com/
    component_panel.layout = mig_layout 'wrap 2'
    component_panel
  end

  def make_default_label
    Label.new do |l|
      l.font = Font.new 'Lucida Grande', 0, 18
      l.minimum_dimensions LABEL_WIDTH, LABEL_HEIGHT
      l.text = 'Neurogami::SwingSet rulez!'
    end
  end

  def make_default_button
    btn = Button.new do |b|
      b.text = 'Close'
    end
    btn.addActionListener ->(e) { default_button_clicked e }
    btn
  end

  def default_button_clicked(_event)
    puts 'Our button was clicked'
    java.lang.System.exit 0
  end
end
